import random
import math

def cost(board):
    """Calculate number of attacking pairs of queens."""
    attacks = 0
    n = len(board)
    for i in range(n):
        for j in range(i+1, n):
            # Same column
            if board[i] == board[j]:
                attacks += 1
            # Same diagonal
            if abs(board[i] - board[j]) == abs(i - j):
                attacks += 1
    return attacks

def random_neighbor(board):
    """Generate a neighbor by randomly changing the column of one queen."""
    n = len(board)
    neighbor = board[:]
    row = random.randint(0, n-1)
    col = random.randint(0, n-1)
    while col == neighbor[row]:  # ensure change
        col = random.randint(0, n-1)
    neighbor[row] = col
    return neighbor

def simulated_annealing(n=8, max_iter=100000, initial_temp=100.0, cooling_rate=0.99):
    """Perform simulated annealing to solve the N-Queens problem."""
    current = [random.randint(0, n-1) for _ in range(n)]
    current_cost = cost(current)
    temperature = initial_temp
    
    for iteration in range(max_iter):
        if current_cost == 0:
            print(f"Solution found at iteration {iteration}")
            return current
        
        neighbor = random_neighbor(current)
        neighbor_cost = cost(neighbor)
        
        delta = neighbor_cost - current_cost
        
        if delta < 0 or random.random() < math.exp(-delta / temperature):
            current = neighbor
            current_cost = neighbor_cost
        
        temperature *= cooling_rate
        
        # Optional: stop if temperature is too low
        if temperature < 1e-10:
            break
    
    print("No perfect solution found.")
    return current

def print_board(board):
    n = len(board)
    for row in range(n):
        line = ""
        for col in range(n):
            if board[row] == col:
                line += " Q "
            else:
                line += " . "
        print(line)
    print(f"Conflicts: {cost(board)}")

# Run
solution = simulated_annealing()
print_board(solution)